#!/bin/bash
exec >uperf-client-stderrout.txt
exec 2>&1

echo "args: $@"
echo
if [ -z "$RS_CS_LABEL" ]; then
    echo "RS_CS_LABEL is not defined, exiting"
    exit 1
else
    echo "RS_CS_LABEL: $RS_CS_LABEL"
    echo
fi
echo "hostname: `hostname`"
echo
echo "pwd:"
/bin/pwd
echo
echo "ls -alR:"
/bin/ls -alR
echo
# defaults
nthreads=1
protocol=tcp
wsize=1024
rsize=1024
duration=60
remotehost=""
control_port=""
data_port=""
server_ifname="eth0"
test_type=""

longopts="test-type:,protocol:,rsize:,wsize:,nthreads:,remotehost:,duration:,server-ifname:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    printf -- "\tUnrecognized option specified\n\n"
    exit 1
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --test-type)
            shift;
            test_type=$1
            echo "test_type=$test_type"
            if [ ! -e /tmp/xml-files/$test_type.xml ]; then
                echo "ERROR: could not find /tmp/xml-files/$test_type.xml"
                exit 1
            fi
            shift;
            ;;
        --nthreads)
            shift;
            nthreads=$1
            echo "nthreads=$nthreads"
            shift;
            ;;
        --protocol)
            shift;
            protocol=$1
            echo "protocol=$protocol"
            shift
            ;;
        --rsize)
            shift;
            rsize=$1
            echo "rsize=$rsize"
            shift
            ;;
        --wsize)
            shift;
            wsize=$1
            echo "wsize=$wsize"
            shift
            ;;
        --remotehost)
            shift;
            remotehost=$1
            echo "remotehost=$remotehost"
            shift
            ;;
        --server-ifname)
            shift;
            server_ifname=$1
            echo "server_ifname=$server_ifname"
            shift
            ;;
        --duration)
            shift;
            duration=$1
            echo "duration=$duration"
            shift
            ;;
        --)
            shift;
            break
            ;;
        *)
            echo "Invalid option: $1"
            exit 1
    esac
done

id=`echo $RS_CS_LABEL | awk -F- '{print $2}'`
re='^[1-9][0-9]*$'
if [[ ! "$id" =~ $re ]]; then
    echo "ID must a be a positive interger, exiting"
    exit 1
fi

if [ -z "$remotehost" ]; then
    echo "Remotehost was not set via cmdline args, checking any messages from server & endpoint"
    file="msgs/rx/client-start:1"
    if [ -e "$file" ]; then
        echo "Found $file"
        ipaddr=`jq -r '.svc.ip' $file`
        if [ ! -z "$ipaddr" ]; then
            echo "Found server IP $ipaddr"
            remotehost=$ipaddr
        fi
        port=`jq -r '.svc.ports[0]' $file`
        if [ ! -z "$port" ]; then
            echo "Found server control port $port"
            control_port=$port
        fi
        port=`jq -r '.svc.ports[1]' $file`
        if [ ! -z "$port" ]; then
            echo "Found server data port $port"
            data_port=$port
        fi
    fi
fi

if [ -z "$remotehost" ]; then
    echo "remotehost is not set"
    exit 1
fi
if [ -z "$control_port" ]; then
    let "control_port = 2 * $id"
    let "control_port = $control_port + 30000"
    echo "control_port was not set, using default of $control_port"
fi
if [ -z "$datal_port" ]; then
    let "data_port = $control_port + 1"
    echo "data_port was not set, using default of $data_port"
fi

test_xml="/tmp/xml-files/$test_type.xml"
if [ ! -e $test_xml ]; then
    echo "$test_xml not found"
    exit 1
fi


echo "test-xml-files:"
/bin/ls /tmp/xml-files
echo

echo "ip a:"
ip a
echo

/bin/cp /tmp/xml-files/$test_type.xml test.xml
echo "remotehost=$remotehost"
echo "control_port=$control_port"
echo "data_port=$data_port"
nthreads=$nthreads \
protocol=$protocol \
remotehost=$remotehost \
duration=$duration \
wsize=$wsize \
rsize=$rsize \
port=$data_port \
uperf -m test.xml -P $control_port
