#!/bin/bash
exec >uperf-client-stderrout.txt
exec 2>&1

. /usr/bin/uperf-base || (echo "/usr/bin/uperf-base not found"; exit 1)

dump_runtime
validate_label
validate_sw_prereqs jq ss uperf getopt ip

# defaults
nthreads=1
protocol="tcp"
wsize=1024
rsize=1024
duration=60
remotehost=""
control_port=""
data_port=""
test_type="stream"
uopts=""

longopts="test-type:,protocol:,rsize:,wsize:,nthreads:,remotehost:,duration:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
if [ $? -ne 0 ]; then
    exit_error "Unrecognized option specified"
fi
eval set -- "$opts";
while true; do
    case "$1" in
        --test-type)
            shift;
            test_type=$1
            echo "test_type=$test_type"
            if [ ! -e /tmp/xml-files/$test_type.xml ]; then
                exit_error "could not find /tmp/xml-files/$test_type.xml"
            fi
            shift;
            ;;
        --nthreads)
            shift;
            nthreads=$1
            echo "nthreads=$nthreads"
            shift;
            ;;
        --protocol)
            shift;
            protocol=$1
            echo "protocol=$protocol"
            shift
            ;;
        --rsize)
            shift;
            rsize=$1
            echo "rsize=$rsize"
            shift
            ;;
        --wsize)
            shift;
            wsize=$1
            echo "wsize=$wsize"
            shift
            ;;
        --remotehost)
            shift;
            remotehost=$1
            echo "remotehost=$remotehost"
            shift
            ;;
        --duration)
            shift;
            duration=$1
            echo "duration=$duration"
            shift
            ;;
        --)
            shift;
            break
            ;;
        *)
            exit_error "Invalid option: $1"
    esac
done

if [ ! -e /tmp/xml-files/$test_type.xml ]; then
    exit_error "/tmp/xml-files/$test_type.xml was not found"
fi

# Unless the user specifies a specific remotehost argument, this must
# be sourced from the endpoint (which gets it from the client)
if [ -z "$remotehost" ]; then
    echo "--remotehost was not set via cmdline args, checking any messages from the endpoint"
    echo "These files exist in ./msgs/rx:"
    /bin/ls -l msgs/rx
    file="msgs/rx/client-start:1"
    if [ -e "$file" ]; then
        echo "Found $file"
        ipaddr=`jq -r '.svc.ip' $file`
        if [ ! -z "$ipaddr" ]; then
            echo "Found server IP $ipaddr"
            remotehost=$ipaddr
        fi
        port=`jq -r '.svc.ports[0]' $file`
        if [ ! -z "$port" ]; then
            echo "Found server control port $port"
            control_port=$port
        fi
        port=`jq -r '.svc.ports[1]' $file`
        if [ ! -z "$port" ]; then
            echo "Found server data port $port"
            data_port=$port
        fi
    else
        echo "Did not find $file, so cannot get an IP from the server/endpoint"
    fi
fi

# Confirm we have a remotehost (server) and ports
if [ -z "$remotehost" ]; then
    exit_error "remotehost is not set"
fi
# TODO: validate $remotehost with regex

# These ports should come from the endpoint, but if for some
# reason they don't the default port numbers are calculated
# in this way:
if [ -z "$control_port" ]; then
    let "control_port = 2 * $id"
    let "control_port = $control_port + 30000"
    echo "control_port was not set, using default of $control_port"
fi
if [ -z "$data_port" ]; then
    let "data_port = $control_port + 1"
    echo "data_port was not set, using default of $data_port"
fi
if [[ "$test_type" = "crr" ]]; then
    # show more details of connect/disconnect
    uopts="-tTfa"
fi
/bin/cp /tmp/xml-files/$test_type.xml test.xml
echo "remotehost=$remotehost"
echo "control_port=$control_port"
echo "data_port=$data_port"
echo "duration=$duration"
echo "wsize=$wsize"
echo "rsize=$rsize"
echo "nthreads=$nthreads"
echo "nthreads=$nthreads"

nthreads=$nthreads \
protocol=$protocol \
remotehost=$remotehost \
duration=$duration \
wsize=$wsize \
rsize=$rsize \
port=$data_port \
uperf -R -m test.xml -P $control_port $uopts 2>&1 >uperf-client-result.txt
uperf_rc=$?
if [ $uperf_rc -gt 0 ]; then
    uperf_errors=`grep -i error uperf-client-result.txt`
    exit_error "$uperf_errors"
fi
